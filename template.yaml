AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sengage WebService

  SAM Template for Sengage WebService that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Globals:
  Function:
    Environment:
      Variables:
        ExtensionOwnerTwitchId: "79606633"
        ClientId: "pfo4osx6zryo4kdo5oabxz8pyv84es"
        ExtensionVersion: "0.0.1"
        StateMachineExecutionRoleArn: !GetAtt StatesExecutionRole.Arn
        GameTaskHandlerLambdaArn: !Join [":", ["arn:aws:lambda", !Ref 'AWS::Region', !Ref 'AWS::AccountId', "function", !Join ["-", [!Ref DeploymentStage, "SengamesGameTaskHandlerLambdaFunction"]]   ]]
        

Parameters:
  DeploymentStage:
    Type: String
    Description: (Required) The Development stage we are deploying to. (one of Beta, Prod)
Conditions:
  CreateTable: !Equals [!Ref DeploymentStage, "Beta"]

Resources:
# Http API LAMBDAS
  SengageWSWebService:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref DeploymentStage
      DefinitionUri: ./swagger.yaml
      EndpointConfiguration: REGIONAL
      TracingEnabled: false # TODO enable xray
      Variables:
        Stage: !Ref DeploymentStage
  
  SengageWSLambdaFunction:
    Type: 'AWS::Serverless::Function'
    DependsOn: SengamesGameTaskHandlerLambdaFunction
    Properties:
      Handler: io.sengage.webservice.function.RequestHandler
      FunctionName: !Join ["", [!Ref DeploymentStage, "-", "SengageWSLambdaFunction"]]
      Runtime: java8
      Timeout: 120
      MemorySize: 320
      Role: !GetAtt DefaultLambdaInvocationRole.Arn
      CodeUri: ./target/webservice-1.0.0.jar
      Events:
        Canary:
          Type: Schedule
          Properties:
              Schedule: rate(60 minutes)
              Input: "{ \"httpMethod\": \"GET\", \"path\": \"/ping\" }"
      #Events:
      #  SengageWSWebService:
      #      Type: Api
      #      Properties:
      #          RestApiId: !Ref SengageWSWebService
      #          Path: /{any+}
      #          Method: ANY
  SengamesCWEventHandlerLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: io.sengage.webservice.events.CWEventsHandler
      FunctionName: !Join ["", [!Ref DeploymentStage, "-", "SengamesCWEventHandlerLambdaFunction"]]
      Runtime: java8
      Timeout: 120
      MemorySize: 320
      Role: !GetAtt DefaultLambdaInvocationRole.Arn
      CodeUri: ./target/webservice-1.0.0.jar
      Events:
        Canary:
          Type: Schedule
          Properties:
              Schedule: rate(60 minutes)
              Input: "{ \"detailType\": \"PING\"}"
  SengamesGameTaskHandlerLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: io.sengage.webservice.function.GameTaskHandler
      FunctionName: !Join ["", [!Ref DeploymentStage, "-", "SengamesGameTaskHandlerLambdaFunction"]]
      Runtime: java8
      Timeout: 120
      MemorySize: 320
      Role: !GetAtt DefaultLambdaInvocationRole.Arn
      CodeUri: ./target/webservice-1.0.0.jar
      Events:
        Canary:
          Type: Schedule
          Properties:
              Schedule: rate(60 minutes)
              Input: "{ \"eventDetail\": \"PING\"}"

          
        
# Cloud watch
  AllPlayersFinishedRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to direct all players finished events to the target"
      Name: !Join ["", [!Ref DeploymentStage, "", "AllPlayersFinishedRule"]]
      EventPattern:
        detail-type:
          - ALL_PLAYERS_FINISHED
      State: ENABLED
      Targets: 
        - Arn: !GetAtt SengamesCWEventHandlerLambdaFunction.Arn
          Id: SengamesCWEventHandlerLambdaFunction
      
  #IAM
  DefaultLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaInvocationRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStream
            - cloudwatch:PutMetricData
            - iam:PassRole
            - events:PutEvents
            - dynamodb:*
            - states:*
            Resource: "*"
  ApiGatewayLambdaInvokePermission:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref DeploymentStage, "ApiGatewayLambdaInvokePermission"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
             - lambda.amazonaws.com
             - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLambdaInvokePermission
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - lambda:InvokeFunction
            Resource: "*"
            
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  PermissionForSengamesAllPlayersFinishedEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "SengamesCWEventHandlerLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "AllPlayersFinishedRule"
          - "Arn"
          
  # DB
  GameTable:
    Condition: CreateTable 
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: GameId
          AttributeType: S
        - AttributeName: channelId
          AttributeType: S
        - AttributeName: gameStatus
          AttributeType: S
      KeySchema:
        - AttributeName: GameId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: Game
      GlobalSecondaryIndexes:
        - IndexName: "channelId-gameStatus-Index"
          KeySchema:
            - AttributeName: channelId
              KeyType: HASH
            - AttributeName: gameStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"
      
  PlayerTable:
    Condition: CreateTable
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: GameId
          AttributeType: S
        - AttributeName: OpaqueId
          AttributeType: S
        - AttributeName: PlayerStatus
          AttributeType: S
        - AttributeName: Score
          AttributeType: N
      KeySchema:
        - AttributeName: GameId
          KeyType: HASH
        - AttributeName: OpaqueId
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: Player
      LocalSecondaryIndexes:
        - IndexName: "GameId-PlayerStatus-Index"
          KeySchema:
            - AttributeName: GameId
              KeyType: HASH
            - AttributeName: PlayerStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: "GameId-Score-Index"
          KeySchema:
            - AttributeName: GameId
              KeyType: HASH
            - AttributeName: Score
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
Outputs:
  ApiGatewayLambdaInvokePermission:
    Description: Arn of the APIG lambda invoke permission
    Value: !GetAtt ApiGatewayLambdaInvokePermission.Arn
  
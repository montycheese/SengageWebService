AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sengage WebService

  SAM Template for Sengage WebService that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Globals:
  Function:
    Environment:
      Variables:
        ExtensionOwnerTwitchId: "79606633"
        ClientId: "pfo4osx6zryo4kdo5oabxz8pyv84es"
        ExtensionVersion: "0.0.1"
        TableName: "Connections"

Parameters:
  DeploymentStage:
    Type: String
    Description: (Required) The Development stage we are deploying to. (one of Beta, Prod)

Resources:
  SengageWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SengageWSWebService
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SengageWebSocket
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthorizer
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SengageWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SengageWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SengageWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SengageWebSocket
      RouteKey: sendMessage
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SengageWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SengageWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref DeploymentStage
      Description: Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SengageWebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: Connections
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./target/webservice-1.0.0.jar
      Handler: io.sengage.webservice.function.OnConnect
      MemorySize: 256
      Runtime: java8
      Policies:
      - DynamoDBCrudPolicy:
          TableName: "Connections"
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SengageWebSocket
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./target/webservice-1.0.0.jar
      Handler: io.sengage.webservice.function.OnDisconnect
      MemorySize: 256
      Runtime: java8
      Policies:
      - DynamoDBCrudPolicy:
          TableName: "Connections"
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SengageWebSocket
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:  ./target/webservice-1.0.0.jar
      Handler: io.sengage.webservice.function.SendMessage
      MemorySize: 256
      Timeout: 30
      Runtime: java8
      Policies:
      - DynamoDBCrudPolicy:
          TableName: "Connections"
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SengageWebSocket}/*'
  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./target/webservice-1.0.0.jar
      Handler: io.sengage.webservice.function.LambdaAuthorizer
      MemorySize: 256
      Runtime: java8
      Timeout: 30
      Policies:
      - AWSLambdaFullAccess
      - CloudWatchLogsFullAccess
        
  LambdaAuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SengageWebSocket
      - LambdaAuthorizerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaAuthorizerFunction
      Principal: apigateway.amazonaws.com
      
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SengageWebSocket
      - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
      
  LambdaAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    #DependsOn:
    #  - LambdaAuthorizerFunction
    Properties:
      ApiId: !Ref SengageWebSocket
      AuthorizerType: REQUEST
      Name: SengageWSApiAuthorizer
      AuthorizerUri: !Join ['', ['arn:aws:apigateway:', !Ref 'AWS::Region', ':lambda:path/2015-03-31/functions/', !GetAtt LambdaAuthorizerFunction.Arn, '/invocations']]
      IdentitySource:
       #https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
        - "route.request.querystring.Auth"
      
# Http API LAMBDAS
  SengageWSWebService:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref DeploymentStage
      DefinitionUri: ./swagger.yaml
      EndpointConfiguration: REGIONAL
      TracingEnabled: false # TODO enable xray
  
  SengageWSLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: io.sengage.webservice.function.RequestHandler
      FunctionName: SengageWSLambdaFunction
      Runtime: java8
      Timeout: 120
      MemorySize: 320
      Role: !GetAtt DefaultLambdaInvocationRole.Arn
      CodeUri: ./target/webservice-1.0.0.jar
      #Events:
      #  SengageWSWebService:
      #      Type: Api
      #      Properties:
      #          RestApiId: !Ref SengageWSWebService
      #          Path: /{any+}
      #          Method: ANY
  SengamesCWEventHandlerLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: io.sengage.webservice.events.CWEventsHandler
      FunctionName: SengamesCWEventHandlerLambdaFunction
      Runtime: java8
      Timeout: 120
      MemorySize: 320
      Role: !GetAtt DefaultLambdaInvocationRole.Arn
      CodeUri: ./target/webservice-1.0.0.jar
# Cloud watch
  WaitingForPlayersCompleteRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to direct waiting for players complete events to the target"
      Name: "WaitingForPlayersCompleteRule"
      EventPattern:
        detail-type:
          - WAITING_FOR_PLAYERS_COMPLETE
      State: ENABLED
      Targets: 
        - Arn: !GetAtt SengamesCWEventHandlerLambdaFunction.Arn
          Id: SengamesCWEventHandlerLambdaFunction
      
      
  #IAM
  DefaultLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaInvocationRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStream
            - cloudwatch:PutMetricData
            - events:PutEvents
            - dynamodb:*
            Resource: "*"
  ApiGatewayLambdaInvokePermission:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
             - lambda.amazonaws.com
             - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLambdaInvokePermission
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - lambda:InvokeFunction
            Resource: "*"
  PermissionForSengamesEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "SengamesCWEventHandlerLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "WaitingForPlayersCompleteRule"
          - "Arn"
  # DB
    # DDB tables
  GameTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: GameId
          AttributeType: S
      KeySchema:
        - AttributeName: GameId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: Game
      
  PlayerTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: GameId
          AttributeType: S
        - AttributeName: OpaqueId
          AttributeType: S
        - AttributeName: PlayerStatus
          AttributeType: S
      KeySchema:
        - AttributeName: GameId
          KeyType: HASH
        - AttributeName: OpaqueId
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: Player
      LocalSecondaryIndexes:
        - IndexName: "GameId-PlayerStatus-Index"
          KeySchema:
            - AttributeName: GameId
              KeyType: HASH
            - AttributeName: PlayerStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SengageWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
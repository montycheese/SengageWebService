AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sengage WebService

  SAM Template for Sengage WebService that has the DynamoDB table and Lambda functions
  needed to demonstrate the Websocket protocol on API Gateway.

  '
Globals:
  Function:
    Environment:
      Variables:
        ClientId: pfo4osx6zryo4kdo5oabxz8pyv84es
        ExtensionOwnerTwitchId: '79606633'
        ExtensionVersion: 0.0.1
        TableName: Connections
Outputs:
  ConnectionsTableArn:
    Description: Connections table ARN
    Value:
      Fn::GetAtt:
      - ConnectionsTable
      - Arn
  OnConnectFunctionArn:
    Description: OnConnect function ARN
    Value:
      Fn::GetAtt:
      - OnConnectFunction
      - Arn
  OnDisconnectFunctionArn:
    Description: OnDisconnect function ARN
    Value:
      Fn::GetAtt:
      - OnDisconnectFunction
      - Arn
  SendMessageFunctionArn:
    Description: SendMessage function ARN
    Value:
      Fn::GetAtt:
      - SendMessageFunction
      - Arn
  WebSocketURI:
    Description: The WSS Protocol URI to connect to
    Value:
      Fn::Join:
      - ''
      - - wss://
        - Ref: SengageWebSocket
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: Stage
Parameters:
  DeploymentStage:
    Description: (Required) The Development stage we are deploying to. (one of Beta,
      Prod)
    Type: String
Resources:
  ApiGatewayLambdaInvokePermission:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: ApiGatewayLambdaInvokePermission
    Type: AWS::IAM::Role
  ConnectInteg:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
    Type: AWS::ApiGatewayV2::Integration
  ConnectRoute:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      AuthorizationType: CUSTOM
      AuthorizerId:
        Ref: LambdaAuthorizer
      OperationName: ConnectRoute
      RouteKey: $connect
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectInteg
    Type: AWS::ApiGatewayV2::Route
  ConnectionsTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: false
      TableName: Connections
    Type: AWS::DynamoDB::Table
  DefaultLambdaInvocationRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStream
            - cloudwatch:PutMetricData
            - events:PutEvents
            - dynamodb:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: LambdaInvocationRolePolicy
    Type: AWS::IAM::Role
  Deployment:
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: SengageWebSocket
    Type: AWS::ApiGatewayV2::Deployment
  DisconnectInteg:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
    Type: AWS::ApiGatewayV2::Integration
  DisconnectRoute:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      RouteKey: $disconnect
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectInteg
    Type: AWS::ApiGatewayV2::Route
  GameTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: GameId
        AttributeType: S
      KeySchema:
      - AttributeName: GameId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: Game
    Type: AWS::DynamoDB::Table
  LambdaAuthorizer:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      AuthorizerType: REQUEST
      AuthorizerUri:
        Fn::Join:
        - ''
        - - 'arn:aws:apigateway:'
          - Ref: AWS::Region
          - :lambda:path/2015-03-31/functions/
          - Fn::GetAtt:
            - LambdaAuthorizerFunction
            - Arn
          - /invocations
      IdentitySource:
      - route.request.querystring.Auth
      Name: SengageWSApiAuthorizer
    Type: AWS::ApiGatewayV2::Authorizer
  LambdaAuthorizerFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/7b3e4fa9695fc7eebff3ff94327767ef
      Handler: io.sengage.webservice.function.LambdaAuthorizer
      MemorySize: 256
      Policies:
      - AWSLambdaFullAccess
      - CloudWatchLogsFullAccess
      Runtime: java8
      Timeout: 30
    Type: AWS::Serverless::Function
  LambdaAuthorizerFunctionPermission:
    DependsOn:
    - SengageWebSocket
    - LambdaAuthorizerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: LambdaAuthorizerFunction
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission
  OnConnectFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/7b3e4fa9695fc7eebff3ff94327767ef
      Handler: io.sengage.webservice.function.OnConnect
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Connections
      Runtime: java8
    Type: AWS::Serverless::Function
  OnConnectPermission:
    DependsOn:
    - SengageWebSocket
    - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission
  OnDisconnectFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/7b3e4fa9695fc7eebff3ff94327767ef
      Handler: io.sengage.webservice.function.OnDisconnect
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Connections
      Runtime: java8
    Type: AWS::Serverless::Function
  OnDisconnectPermission:
    DependsOn:
    - SengageWebSocket
    - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission
  PermissionForSengamesEventToInvokeLambda:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SengamesCWEventHandlerLambdaFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - WaitingForPlayersCompleteRule
        - Arn
    Type: AWS::Lambda::Permission
  PlayerTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: GameId
        AttributeType: S
      - AttributeName: OpaqueId
        AttributeType: S
      KeySchema:
      - AttributeName: GameId
        KeyType: HASH
      - AttributeName: OpaqueId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: Player
    Type: AWS::DynamoDB::Table
  SendInteg:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
    Type: AWS::ApiGatewayV2::Integration
  SendMessageFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/7b3e4fa9695fc7eebff3ff94327767ef
      Handler: io.sengage.webservice.function.SendMessage
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Connections
      - Statement:
        - Action:
          - execute-api:ManageConnections
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SengageWebSocket}/*
      Runtime: java8
      Timeout: 30
    Type: AWS::Serverless::Function
  SendMessagePermission:
    DependsOn:
    - SengageWebSocket
    - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission
  SendRoute:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      OperationName: SendRoute
      RouteKey: sendMessage
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SendInteg
    Type: AWS::ApiGatewayV2::Route
  SengageWSLambdaFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/7b3e4fa9695fc7eebff3ff94327767ef
      FunctionName: SengageWSLambdaFunction
      Handler: io.sengage.webservice.function.RequestHandler
      MemorySize: 320
      Role:
        Fn::GetAtt:
        - DefaultLambdaInvocationRole
        - Arn
      Runtime: java8
      Timeout: 120
    Type: AWS::Serverless::Function
  SengageWSWebService:
    Properties:
      DefinitionUri: s3://deployment-us-east-1-lambdas-1/11d9b56659eba222ae0a735673f3d6b9
      EndpointConfiguration: REGIONAL
      StageName:
        Ref: DeploymentStage
      TracingEnabled: false
    Type: AWS::Serverless::Api
  SengageWebSocket:
    Properties:
      Name: SengageWSWebService
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.message
    Type: AWS::ApiGatewayV2::Api
  SengamesCWEventHandlerLambdaFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/7b3e4fa9695fc7eebff3ff94327767ef
      FunctionName: SengamesCWEventHandlerLambdaFunction
      Handler: io.sengage.webservice.events.CWEventsHandler
      MemorySize: 320
      Role:
        Fn::GetAtt:
        - DefaultLambdaInvocationRole
        - Arn
      Runtime: java8
      Timeout: 120
    Type: AWS::Serverless::Function
  Stage:
    Properties:
      ApiId:
        Ref: SengageWebSocket
      DeploymentId:
        Ref: Deployment
      Description: Stage
      StageName:
        Ref: DeploymentStage
    Type: AWS::ApiGatewayV2::Stage
  WaitingForPlayersCompleteRule:
    Properties:
      Description: Rule to direct waiting for players complete events to the target
      EventPattern:
        detail-type:
        - WAITING_FOR_PLAYERS_COMPLETE
      Name: WaitingForPlayersCompleteRule
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - SengamesCWEventHandlerLambdaFunction
          - Arn
        Id: SengamesCWEventHandlerLambdaFunction
    Type: AWS::Events::Rule
Transform: AWS::Serverless-2016-10-31

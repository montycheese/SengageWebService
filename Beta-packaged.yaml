AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  CreateTable:
    Fn::Equals:
    - Ref: DeploymentStage
    - Beta
Description: 'Sengage WebService

  SAM Template for Sengage WebService that has the DynamoDB table and Lambda functions
  needed to demonstrate the Websocket protocol on API Gateway.

  '
Globals:
  Function:
    Environment:
      Variables:
        ClientId: pfo4osx6zryo4kdo5oabxz8pyv84es
        ExtensionOwnerTwitchId: '79606633'
        ExtensionVersion: 0.0.1
        GameTaskHandlerLambdaArn:
          Fn::Join:
          - ':'
          - - arn:aws:lambda
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - function
            - Fn::Join:
              - '-'
              - - Ref: DeploymentStage
                - SengamesGameTaskHandlerLambdaFunction
        StateMachineExecutionRoleArn:
          Fn::GetAtt:
          - StatesExecutionRole
          - Arn
Outputs:
  ApiGatewayLambdaInvokePermission:
    Description: Arn of the APIG lambda invoke permission
    Value:
      Fn::GetAtt:
      - ApiGatewayLambdaInvokePermission
      - Arn
Parameters:
  DeploymentStage:
    Description: (Required) The Development stage we are deploying to. (one of Beta,
      Prod)
    Type: String
Resources:
  AllPlayersFinishedRule:
    Properties:
      Description: Rule to direct all players finished events to the target
      EventPattern:
        detail-type:
        - ALL_PLAYERS_FINISHED
      Name:
        Fn::Join:
        - ''
        - - Ref: DeploymentStage
          - ''
          - AllPlayersFinishedRule
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - SengamesCWEventHandlerLambdaFunction
          - Arn
        Id: SengamesCWEventHandlerLambdaFunction
    Type: AWS::Events::Rule
  ApiGatewayLambdaInvokePermission:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: ApiGatewayLambdaInvokePermission
      RoleName:
        Fn::Join:
        - '-'
        - - Ref: DeploymentStage
          - ApiGatewayLambdaInvokePermission
    Type: AWS::IAM::Role
  DefaultLambdaInvocationRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStream
            - cloudwatch:PutMetricData
            - iam:PassRole
            - events:PutEvents
            - dynamodb:*
            - states:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: LambdaInvocationRolePolicy
    Type: AWS::IAM::Role
  GameTable:
    Condition: CreateTable
    Properties:
      AttributeDefinitions:
      - AttributeName: GameId
        AttributeType: S
      KeySchema:
      - AttributeName: GameId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: Game
    Type: AWS::DynamoDB::Table
  PermissionForSengamesAllPlayersFinishedEventToInvokeLambda:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SengamesCWEventHandlerLambdaFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - AllPlayersFinishedRule
        - Arn
    Type: AWS::Lambda::Permission
  PlayerTable:
    Condition: CreateTable
    Properties:
      AttributeDefinitions:
      - AttributeName: GameId
        AttributeType: S
      - AttributeName: OpaqueId
        AttributeType: S
      - AttributeName: PlayerStatus
        AttributeType: S
      KeySchema:
      - AttributeName: GameId
        KeyType: HASH
      - AttributeName: OpaqueId
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: GameId-PlayerStatus-Index
        KeySchema:
        - AttributeName: GameId
          KeyType: HASH
        - AttributeName: PlayerStatus
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: Player
    Type: AWS::DynamoDB::Table
  SengageWSLambdaFunction:
    DependsOn: SengamesGameTaskHandlerLambdaFunction
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/5184219d9fb2f5762f7b3706778632dd
      FunctionName:
        Fn::Join:
        - ''
        - - Ref: DeploymentStage
          - '-'
          - SengageWSLambdaFunction
      Handler: io.sengage.webservice.function.RequestHandler
      MemorySize: 320
      Role:
        Fn::GetAtt:
        - DefaultLambdaInvocationRole
        - Arn
      Runtime: java8
      Timeout: 120
    Type: AWS::Serverless::Function
  SengageWSWebService:
    Properties:
      DefinitionUri: s3://deployment-us-east-1-lambdas-1/9f9e5f3772070116aeedad58b1c37a33
      EndpointConfiguration: REGIONAL
      StageName:
        Ref: DeploymentStage
      TracingEnabled: false
      Variables:
        Stage:
          Ref: DeploymentStage
    Type: AWS::Serverless::Api
  SengamesCWEventHandlerLambdaFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/5184219d9fb2f5762f7b3706778632dd
      FunctionName:
        Fn::Join:
        - ''
        - - Ref: DeploymentStage
          - '-'
          - SengamesCWEventHandlerLambdaFunction
      Handler: io.sengage.webservice.events.CWEventsHandler
      MemorySize: 320
      Role:
        Fn::GetAtt:
        - DefaultLambdaInvocationRole
        - Arn
      Runtime: java8
      Timeout: 120
    Type: AWS::Serverless::Function
  SengamesGameTaskHandlerLambdaFunction:
    Properties:
      CodeUri: s3://deployment-us-east-1-lambdas-1/5184219d9fb2f5762f7b3706778632dd
      FunctionName:
        Fn::Join:
        - ''
        - - Ref: DeploymentStage
          - '-'
          - SengamesGameTaskHandlerLambdaFunction
      Handler: io.sengage.webservice.function.GameTaskHandler
      MemorySize: 320
      Role:
        Fn::GetAtt:
        - DefaultLambdaInvocationRole
        - Arn
      Runtime: java8
      Timeout: 120
    Type: AWS::Serverless::Function
  StatesExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: StatesExecutionPolicy
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
